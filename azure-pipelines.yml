trigger:
- master

jobs:
  - job: BuildTA
    pool:
      vmImage: 'Ubuntu-16.04'
    strategy:
      matrix:
        TpmWolf:
          Target: fTPM
          Crypto: CFG_FTPM_USE_WOLF=y
          TestArch: 32
        TpmOSSL:
          Target: fTPM
          Crypto: CFG_FTPM_USE_WOLF=n
          TestArch: 32
        AuthvarsWolf:
          Target: AuthVars
          Crypto: CFG_AUTHVARS_USE_WOLF=y
          TestArch: 32
        AuthvarsOSSL:
          Target: AuthVars
          Crypto: CFG_AUTHVARS_USE_WOLF=n
          TestArch: 32

    steps:
    - script: |
        cd ..
        git clone https://github.com/ms-iot/optee_os.git
      displayName: Clone OP-TEE

    - script: |
        cd ..
        git clone https://github.com/microsoft/MSRsec.git
      displayName: Clone TAs

    - script: |
        echo '##vso[task.setvariable variable=CrossCompile]gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-'
        wget https://releases.linaro.org/components/toolchain/binaries/6.4-2017.11/arm-linux-gnueabihf/gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf.tar.xz
        tar xf gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf.tar.xz
      displayName: Download GCC 32
      condition: eq(variables['Arch'], '32')

    - script: |
        echo '##vso[task.setvariable variable=CrossCompile]gcc-linaro-7.2.1-2017.11-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-'
        wget https://releases.linaro.org/components/toolchain/binaries/7.2-2017.11/aarch64-linux-gnu/gcc-linaro-7.2.1-2017.11-x86_64_aarch64-linux-gnu.tar.xz
        tar xf gcc-linaro-7.2.1-2017.11-x86_64_aarch64-linux-gnu.tar.xz
      displayName: Download GCC 64
      condition: eq(variables['Arch'], '64')
    
    - script: |
        cd ../optee_os
        CROSS_COMPILE=$(Build.SourcesDirectory)/$(CrossCompile) make PLATFORM=imx-mx6qhmbedge CFG_TEE_CORE_LOG_LEVEL=4 CFG_REE_FS=n CFG_RPMB_FS=y CFG_RPMB_TESTKEY=y CFG_RPMB_WRITE_KEY=y CPPFLAGS="-fshort-wchar"
      displayName: Build OP-TEE

    - script: |
        cd ../MSRsec
        cd TAs/optee_ta/$(Target)
        make $(Crypto) TA_CPU=cortex-a9 TA_CROSS_COMPILE=$(Build.SourcesDirectory)/$(CrossCompile) CROSS_COMPILE=$(Build.SourcesDirectory)/$(CrossCompile) TA_DEV_KIT_DIR=$(Build.SourcesDirectory)/../optee_os/out/arm-plat-imx/export-ta_arm32
      displayName: Build TA

    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/../MSRsec/TAs/optee_ta/out/$(Target)/'
        contents: '*.ta'
        targetFolder: '$(Build.ArtifactStagingDirectory)/ta'

    - task: PublishBuildArtifacts@1
      inputs:
        artifactName: '$(Target)-$(Crypto)-$(TestArch)'
        targetPath: '$(Build.ArtifactStagingDirectory)/ta'

  - job: RunQEMU
    pool:
      vmImage: 'Ubuntu-16.04'
    strategy:
      matrix:
        TpmWolf:
          Target: ftpm
          Crypto: CFG_FTPM_USE_WOLF=y
          TestArch: 32
        TpmOSSL:
          Target: ftpm
          Crypto: CFG_FTPM_USE_WOLF=n
          TestArch: 32
        AuthvarsWolf:
          Target: authvars
          Crypto: CFG_AUTHVARS_USE_WOLF=y
          TestArch: 32
        AuthvarsOSSL:
          Target: authvars
          Crypto: CFG_AUTHVARS_USE_WOLF=n
          TestArch: 32
      
    dependsOn: BuildTA

    steps:
    - script: |
        make -f build_tests.mk test_toolchains -j2
        echo '##vso[task.setvariable variable=CrossCompile]toolchains/gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-'
      displayName: Download GCC 32
      condition: eq(variables['Arch'], '32')

    - script: |
        make -f build_tests.mk test_toolchains -j2
        echo '##vso[task.setvariable variable=CrossCompile]toolchains/gcc-linaro-7.2.1-2017.11-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-'
      displayName: Download GCC 64
      condition: eq(variables['Arch'], '64')

    - script: |
        cd ..
        git clone https://github.com/OP-TEE/optee_client.git
        cd optee_client
        make CROSS_COMPILE=$(Build.SourcesDirectory)/$(CrossCompile)
      displayName: Build optee_client

    - script: |
        make -f build_tests.mk $(Target)_test_$(TestArch) TEEC_EXPORT_PATH=$(Build.SourcesDirectory)/../optee_client/out/export/usr
      displayName: Build test application

    - task: DownloadBuildArtifacts@0
      displayName: 'Download TA'
      inputs:
        artifactName: '$(Target)-$(Crypto)-$(TestArch)'
        downloadPath: '$(System.ArtifactsDirectory)'

    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(System.ArtifactsDirectory)/$(Target)-$(Crypto)-$(TestArch)/ta'
        contents: '*.ta'
        targetFolder: '$(Build.SourcesDirectory)/run/qemu_$(TestArch)_mnt'
      displayName: Copy TA binary

    - script: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install android-tools-adb android-tools-fastboot autoconf automake bc bison build-essential cscope curl device-tree-compiler expect flex ftp-upload gdisk iasl libattr1-dev libc6:i386 libcap-dev libfdt-dev libftdi-dev libglib2.0-dev libhidapi-dev libncurses5-dev libpixman-1-dev libssl-dev libstdc++6:i386 libtool libz1:i386 make mtools netcat python-crypto python-serial python-wand unzip uuid-dev xdg-utils xterm xz-utils zlib1g-dev
      displayName: Install QEMU dependencies

    - task: AzureCLI@1
      displayName: 'Download QEMU'
      inputs:
        azureSubscription: 'Silicon team: Cosine IOT Services Azure Internal Consumption'
        scriptLocation: inlineScript
        inlineScript: |
          az storage blob download \
          --account-name siliconqemu \
          --container-name qemuimages \
          --name qemu_$(TestArch).tar.gz \
          --file $(Build.SourcesDirectory)/qemu_$(TestArch).tar.gz

    - script: |
        cd qemu_build
        sudo make $(Target)_test_$(TestArch)
      timeoutInMinutes: 10
      displayName: Run Test

    - script: |
        cd qemu_build/qemu_$(TestArch)_run/logs
        ls
        cat $(Target)_$(TestArch)_qemu.log
        cat $(Target)_$(TestArch)_tee.log
        cat $(Target)_$(TestArch)_ree.log
        cat $(Target)_$(TestArch)_results.log
      condition: always()
      displayName: Dump Logs