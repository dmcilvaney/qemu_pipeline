trigger:
- master

jobs:
  # - job: BuildQEMU
  #   pool:
  #     vmImage: 'Ubuntu-16.04'
  #   timeoutInMinutes: 0

  #   steps:
  #   - script: |
  #       sudo dpkg --add-architecture i386
  #       sudo apt-get update
  #       sudo apt-get install android-tools-adb android-tools-fastboot autoconf automake bc bison build-essential cscope curl device-tree-compiler expect flex ftp-upload gdisk iasl libattr1-dev libc6:i386 libcap-dev libfdt-dev libftdi-dev libglib2.0-dev libhidapi-dev libncurses5-dev libpixman-1-dev libssl-dev libstdc++6:i386 libtool libz1:i386 make mtools netcat python-crypto python-serial python-wand unzip uuid-dev xdg-utils xterm xz-utils zlib1g-dev
  #       mkdir ../google_repo
  #       cd ../google_repo
  #       curl https://storage.googleapis.com/git-repo-downloads/repo > repo
  #       chmod a+x repo
  #       ls
  #     displayName: Install Tools

  #   - task: DownloadBuildArtifacts@0
  #     displayName: 'Recover previous QEMU build'
  #     inputs:
  #       buildType: 'specific'
  #       project: 'IOT'
  #       pipeline: 'NXP QEMU testing pipeline'
  #       allowPartiallySucceededBuilds: true
  #       buildVersionToDownload: 'latest'
  #       downloadType: 'single'
  #       artifactName: 'QEMU-State'
  #       downloadPath: '$(System.ArtifactsDirectory)'
  #     continueOnError: true
  #     condition: succeededOrFailed()

  #   - script: |
  #       cd ..
  #       if [ -f $(System.ArtifactsDirectory)/qemu_state/qemu.tar.gz ]; then
  #         tar -zxvf $(System.ArtifactsDirectory)/qemu-state/qemu.tar.gz -C .
  #         ls
  #         cd qemu
  #         ls
  #       else
  #         mkdir qemu
  #         ls
  #         cd qemu
  #         ls
  #       fi
  #       cd qemu
  #       export PATH=$(pwd)/../google_repo:$PATH
  #       repo init -u https://github.com/OP-TEE/manifest.git -m default.xml
  #       repo sync -j50 --no-clone-bundle
  #     displayName: Download QEMU

  #   - script: |
  #       cd ../qemu/build
  #       make -j2 toolchains
  #     displayName: Download QEMU Build Tools

  #   - script: |
  #       cd ../qemu/build
  #       make -j1
  #       cd ..
  #       ls
  #     continueOnError: 'true'
  #     displayName: Build QEMU

  #   - script: |
  #       cd ..
  #       ls
  #       ls ./qemu/
  #       mkdir -p $(Build.ArtifactStagingDirectory)/qemu_state
  #       tar -zcvf $(Build.ArtifactStagingDirectory)/qemu_state/qemu.tar.gz ./qemu
  #     condition: always()
  #     displayName: Compres QEMU

  #   - task: PublishPipelineArtifact@0
  #     inputs:
  #       artifactName: 'qemu'
  #       targetPath: '$(Build.ArtifactStagingDirectory)/qemu_state/qemu.tar.gz'
  #     condition: always()

  - job: RunQEMU
    pool:
      vmImage: 'Ubuntu-16.04'
    strategy:
      matrix:
        TpmWolf:
          Target: fTPM
          Crypto: CFG_FTPM_USE_WOLF=y
        TpmOSSL:
          Target: fTPM
          Crypto: CFG_FTPM_USE_WOLF=n
        AuthvarsWolf:
          Target: AuthVars
          Crypto: CFG_AUTHVARS_USE_WOLF=y
        AuthvarsOSSL:
          Target: AuthVars
          Crypto: CFG_AUTHVARS_USE_WOLF=n

    steps:
    - script: |
        sudo apt-get install sshpass
      displayName: Install tools

    - script: |
        mkdir ../qemu
        tar xvf OE-CI-Ubuntu-16.04-AARCH64.tar.xz -C ../qemu --no-same-owner --strip-components=1
        cd ../qemu
        ls
      displayName: Extract QEMU binary

    - script: |
        cd ../qemu
        nohup ./qemu-system-aarch64 \
          -nographic \
          -serial file:ree.log -serial file:tee.log \
          -smp 1 \
          -machine virt,secure=on -cpu cortex-a57 \
          -m 1057 \
          -bios bl1.bin \
          -semihosting-config enable,target=native \
          -d unimp \
          -initrd rootfs.cpio.gz \
          -kernel Image \
          -no-acpi \
          -append 'console=ttyAMA0,38400 keep_bootcon root=/dev/vda2' \
          -netdev user,id=net0,hostfwd=tcp::5555-:22 -device virtio-net,netdev=net0 \
          -virtfs local,id=sh0,path=$(Build.SourcesDirectory)/,security_model=passthrough,readonly,mount_tag=sh0 &
        disown
        
        echo QEMU started
        sleep 10
        
        echo Attempting to connect to QEMU
        mkdir $HOME/.ssh
        ssh-keyscan -T 300 -p 5555 localhost >> $HOME/.ssh/known_hosts

        echo Contacting QEMU
        QEMU_CMD="su -c \" \
          mkdir /mnt/ci && \
          mount -t 9p -o trans=virtio sh0 /mnt/ci -oversion9p2000.L && \
          cp /mnt/ci/hello_world.txt /lib/optee_armtz && \
          cat /lib/optee_armtz/hello_world.txt \
        \""
        echo "Command:"
        echo $QEMU_CMD

        sshpass -p test ssh test@localhost -p 5555 "$QEMU_CMD"
        if [ $? -ne 0 ]; then
          pkill -9 qemu-system-arr
          exit 1
        fi

        echo "Done!"
        pkill -9 qemu-system-arr